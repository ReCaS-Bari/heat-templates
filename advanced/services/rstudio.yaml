heat_template_version: 2013-05-23

description: Deploy a dockerized RStudio Server

parameters:
  key_name:
    type: string
    description: Name of a KeyPair
    default: ROBOT_RSA
  vm_name:
    type: string
    label: VM name
    default: rstudio-server
  image_id:
    type: string
    label: Image ID
    default: 9ba220c2-7205-484b-bd19-d4af8194d298
    description: Image to be used for compute instance (default is Ubuntu 14.04)
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: medium
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
    default: nova
  net_id:
    type: string
    default: fe82ef7b-4bb7-4c1e-b4ec-ec5c1b0c7333
    description: ID of public (default) or private network
  scheduler_hints:
    type: string
    description: The Host Aggregate to launch the instance in form of '{host:myhost}'.
    default: nova
  security_groups:
    type: comma_delimited_list
    description: List of security group names or IDs
  volume_size:
    type: number
    description: Size (in GB) of the volume to be created.
    default: 10
  mountpoint:
    type: string
    description: The directory to provide to the user
    default: /home
  rstudio_user:
    type: string
    description: username for RStudio Server
    default: rstudio-user
  rstudio_password:
    type: string
    description: password for the user of RStudio Server
    default: password

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: vm_name }
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
      flavor: { get_param: instance_type }
      networks:
        - port: { get_resource: server1_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            sed -i -e 's/^.*ssh/ssh/' /root/.ssh/authorized_keys
            apt-get update
            apt-get -y install docker.io
            userdel ec2-user
            rm -rf /home/ec2-user
            # Partition, format, mount volume
            device_name=/dev/$(ls /dev | grep -w '[a-z]d[a-z]' | grep -v $(mount | grep ' / ' | grep -o '[a-z]d[a-z]'))
            echo "n
            p
            1


            w
            "|fdisk $device_name;
            mkdir -p mountpoint
            mkfs.ext4 "$device_name"1
            mount "$device_name"1 mountpoint
            # create user
            useradd -s /bin/bash -u 1000 -m rstudio_user
            docker run -d -p 8787:8787 -v /home:/home -e USER=rstudio_user -e PASSWORD=rstudio_password rocker/rstudio
            exit
          params:
            mountpoint: { get_param: mountpoint }
            rstudio_user: { get_param: rstudio_user }
            rstudio_password: { get_param: rstudio_password }
  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: { get_param: availability_zone }
  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: my_instance }
  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: net_id }
      security_groups: { get_param: security_groups }

outputs:
  vmIp:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, first_address] }
  vmUuid:
    description: Resource ID assigned to the newly created instance
    value: { get_resource: my_instance }
  vmName:
    description: vm name
    value: { get_param: vm_name }
  volumeUuid:
    description: Resource ID assigned to the newly created volume attached to instance
    value: { get_resource: cinder_volume }
